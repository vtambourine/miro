{"version":3,"sources":["../src/email-editor.ts","index.ts"],"names":[],"mappings":";;;AAsHA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,EAtHA,QAAA,sBAMA,IAAA,EAAA,WASE,SAAA,EAAY,EAAe,GAEnB,IAAA,EAAY,OAAO,GAEnB,EAAwB,EAAQ,OAAM,UACtC,EAAsB,EAAQ,OAAM,kBACpC,EAA2B,EAAQ,OAAM,iBAEzC,EAAW,SAAS,cAAc,yBAAyB,wBAChD,EAAkB,4BAChB,EAAgB,mCAChB,EAAqB,kCAInC,KAAA,UAAY,EAAS,cAAc,IAAI,GAEvC,EAAS,SAAS,IAChB,KAAA,UAAU,UAAU,IAAI,+BAG1B,KAAA,QAAU,EAAS,cAAc,IAAI,GACrC,KAAA,QAAQ,UAAY,EAEpB,KAAA,oBAAsB,EAAS,cAClC,IAAI,GAGD,KAAA,uBAqBT,OAlBU,EAAA,UAAA,qBAAR,WACM,KAAK,qBACF,KAAA,oBAAoB,iBACvB,QACA,KAAK,OAAO,KAAK,QAKf,EAAA,UAAA,OAAR,WACM,KAAK,UAAU,YACZ,KAAA,UAAU,WAAW,YAAY,KAAK,YAIhC,EAAA,SAAf,SAAwB,GACf,OAAA,EAAS,aAAa,KAAK,IAjDrB,EAAA,aAAe,kDAmDhC,EA1DA,GA4DA,EAAA,WAME,SAAA,EAAY,GACJ,IAAA,EAAwB,EAAQ,OAAM,oBACtC,EAAqB,EAAQ,OAAM,iBACnC,EAAoB,EAAQ,OAAM,UAElC,EAAW,SAAS,cAAc,yBAAyB,uBACjD,EAAkB,2BAChB,EAAe,mCACb,EAAc,4BAI7B,KAAA,UAAY,EAAS,cAAc,IAAI,GACvC,KAAA,YAAc,EAAS,cAAc,IAAI,GACzC,KAAA,MAAQ,EAAS,cAAc,IAAI,GAEnC,KAAA,uBA4BT,OAzBU,EAAA,UAAA,qBAAR,WAAA,IAAA,EAAA,KACO,KAAA,MAAM,iBAAiB,UAAW,SAAA,GACrC,EAAK,YAAY,UAA+B,EAAM,OAAQ,SAIlE,OAAA,eAAI,EAAA,UAAA,QAAK,CAKT,IAAA,WACS,OAAA,KAAK,MAAM,OANpB,IAAA,SAAU,GACH,KAAA,MAAM,MAAQ,EACd,KAAA,YAAY,UAAY,GAFtB,YAAA,EAqBX,cAAA,IAZE,EAAA,UAAA,iBAAA,SACE,EACA,GAEK,KAAA,MAAM,iBAAiB,MAAM,KAAK,MAAO,YAGhD,EAAA,UAAA,MAAA,WACO,KAAA,MAAM,SAEf,EAlDA,GAoDA,EAAA,WAKE,SAAA,EACU,EACA,EACR,QADQ,IAAA,IAAA,EAAA,IADA,KAAA,SAAA,EACA,KAAA,OAAA,EAGH,KAAA,QAAU,OAAO,OACpB,CACE,OAAQ,iBAEV,GAEG,KAAA,SAqDT,OAlDU,EAAA,UAAA,WAAR,WAAA,IAAA,EAAA,KACO,KAAA,WAAW,MACb,OACA,MAAM,KACN,IAAI,SAAA,GAAS,OAAA,EAAM,SACnB,OAAO,SAAA,GAAS,OAAA,EAAM,SACtB,QAAQ,SAAA,GACP,EAAK,UAAU,aACb,IAAI,EAAS,EAAO,EAAK,SAAS,UAClC,EAAK,WAAW,cAKhB,EAAA,UAAA,aAAR,WACO,KAAA,aACA,KAAA,WAAW,MAAQ,IAG1B,EAAA,UAAA,OAAA,WAAA,IAAA,EAAA,KACO,KAAA,UAAY,SAAS,cAAc,OACnC,KAAA,UAAU,UAAU,IAAI,KAAK,QAAQ,QAErC,KAAA,UAAU,iBAAiB,QAAS,WAAM,OAAA,EAAK,WAAW,UAE1D,KAAA,OAAO,QAAQ,SAAA,GACZ,IAAA,EAAM,IAAI,EAAS,EAAO,EAAK,SACrC,EAAK,UAAU,YAAY,EAAI,aAG5B,KAAA,WAAa,IAAI,EAAW,KAAK,SAEjC,KAAA,UAAU,YAAY,KAAK,WAAW,WAEtC,KAAA,WAAW,iBAAiB,QAAS,SAAA,GAChC,OAAA,EAAM,KACP,IAAA,IACA,IAAA,QACH,EAAM,iBACN,EAAK,kBAIN,KAAA,WAAW,iBAAiB,OAAQ,WACvC,EAAK,aACL,EAAK,iBAGF,KAAA,SAAS,OAAO,KAAK,YAE9B,EArEA,GAAA,QAAA,aAAA;;AChHA,aANA,IAAA,EAAA,QAAA,uBAEA,IAAI,EAAJ,aAAiB,SAAS,eAAe,qBAAsB,CAC7D,mBAGF,IAAI,EAAJ,aAAiB,SAAS,eAAe,qBAAsB,CAC7D,6BACA,gCACA,+BACA,gBACA","file":"examples.c698d70a.js","sourceRoot":"../examples","sourcesContent":["import './email-editor.css'\n\ninterface IEmailsGenericOptions {\n  prefix?: string;\n}\n\nclass EmailTag {\n  private content: HTMLSpanElement;\n  private deleteActionElement: HTMLSpanElement;\n\n  container: HTMLSpanElement;\n\n  // TODO: This is simple na√Øve email regular expression. In real application, the email validator must be more complicated.\n  private static EMAIL_REGEXP = /[a-zA-Z0-9\\+]+@[a-zA-Z0-9]{2,}\\.[a-zA-Z0-9]{2,}/;\n\n  constructor(value: string, options: IEmailsGenericOptions) {\n    // TODO: Simple escape function might ruin strings by converting any non-latin characters\n    const safeValue = escape(value);\n\n    const containerClassName = `${options.prefix}__email`;\n    const contentClassName = `${options.prefix}__email-content`;\n    const deleteActionClassName = `${options.prefix}__email-delete`;\n\n    const fragment = document.createRange().createContextualFragment(`\n      <span class=\"${containerClassName}\">\n        <span class=\"${contentClassName}\"></span>\n        <span class=\"${deleteActionClassName}\"></span>\n      </span>\n    `);\n\n    this.container = fragment.querySelector(`.${containerClassName}`);\n\n    if (!EmailTag.validate(safeValue)) {\n      this.container.classList.add(\"emails-editor__email--wrong\");\n    }\n\n    this.content = fragment.querySelector(`.${contentClassName}`);\n    this.content.innerHTML = safeValue;\n\n    this.deleteActionElement = fragment.querySelector(\n      `.${deleteActionClassName}`\n    );\n\n    this.attachEventListeners();\n  }\n\n  private attachEventListeners() {\n    if (this.deleteActionElement) {\n      this.deleteActionElement.addEventListener(\n        \"click\",\n        this.remove.bind(this)\n      );\n    }\n  }\n\n  private remove() {\n    if (this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n  }\n\n  private static validate(string: string): boolean {\n    return EmailTag.EMAIL_REGEXP.test(string);\n  }\n}\n\nclass EmailInput {\n  private shadowInput: HTMLDivElement;\n  private input: HTMLInputElement;\n\n  container: HTMLDivElement;\n\n  constructor(options: IEmailsGenericOptions) {\n    const containerClassName = `${options.prefix}__input-container`;\n    const shadowClassName = `${options.prefix}__input-shadow`;\n    const inputClassName = `${options.prefix}__input`;\n\n    const fragment = document.createRange().createContextualFragment(`\n      <div class=\"${containerClassName}\">\n        <div class=\"${shadowClassName}\"></div>\n        <input class=\"${inputClassName}\" />\n      </div>\n    `);\n\n    this.container = fragment.querySelector(`.${containerClassName}`);\n    this.shadowInput = fragment.querySelector(`.${shadowClassName}`);\n    this.input = fragment.querySelector(`.${inputClassName}`);\n\n    this.attachEventListeners();\n  }\n\n  private attachEventListeners() {\n    this.input.addEventListener(\"keydown\", event => {\n      this.shadowInput.innerText = (<HTMLInputElement>event.target).value;\n    });\n  }\n\n  set value(value: string) {\n    this.input.value = value;\n    this.shadowInput.innerText = value;\n  }\n\n  get value(): string {\n    return this.input.value;\n  }\n\n  addEventListener<K extends keyof HTMLElementEventMap>(\n    type: K,\n    listener: (event: HTMLElementEventMap[K]) => void\n  ): void {\n    this.input.addEventListener.apply(this.input, arguments);\n  }\n\n  focus() {\n    this.input.focus();\n  }\n}\n\nexport class EmailsEditor {\n  private container: HTMLDivElement;\n  private emailInput: EmailInput;\n  private options: IEmailsGenericOptions;\n\n  constructor(\n    private rootNode: HTMLElement,\n    private emails: string[] = [],\n    options?: IEmailsGenericOptions\n  ) {\n    this.options = Object.assign(\n      {\n        prefix: \"emails-editor\",\n      },\n      options\n    );\n    this.render();\n  }\n\n  private parseInput() {\n    this.emailInput.value\n      .trim()\n      .split(\",\")\n      .map(value => value.trim())\n      .filter(value => value.length)\n      .forEach(value => {\n        this.container.insertBefore(\n          new EmailTag(value, this.options).container,\n          this.emailInput.container\n        );\n      });\n  }\n\n  private applyChanges() {\n    this.parseInput();\n    this.emailInput.value = \"\";\n  }\n\n  render() {\n    this.container = document.createElement(\"div\");\n    this.container.classList.add(this.options.prefix);\n\n    this.container.addEventListener(\"click\", () => this.emailInput.focus());\n\n    this.emails.forEach(email => {\n      const tag = new EmailTag(email, this.options);\n      this.container.appendChild(tag.container);\n    });\n\n    this.emailInput = new EmailInput(this.options);\n\n    this.container.appendChild(this.emailInput.container);\n\n    this.emailInput.addEventListener(\"keyup\", event => {\n      switch (event.key) {\n        case \",\":\n        case \"Enter\":\n          event.preventDefault();\n          this.applyChanges();\n      }\n    });\n\n    this.emailInput.addEventListener(\"blur\", () => {\n      this.parseInput();\n      this.applyChanges();\n    });\n\n    this.rootNode.append(this.container);\n  }\n}\n","import { EmailsEditor } from \"../src/email-editor\";\n\nnew EmailsEditor(document.getElementById(\"email-editor-miro\"), [\n  \"alona@miro.com\",\n]);\n\nnew EmailsEditor(document.getElementById(\"email-editor-cats\"), [\n  \"rumpleteazer@jellicles.com\",\n  \"old.deuteronomy@jellicles.com\",\n  \"rum.tum.tugger@jellicles.com\",\n  \"gus@jellicles\",\n  \"alonzo\",\n]);\n"]}